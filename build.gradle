import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'application'
}

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"


// Modify this to build for other operating systems
//boolean doOverride = false
//OperatingSystem override = OperatingSystem.LINUX
//OperatingSystem selectedOS = doOverride ? override : OperatingSystem.current()
//
//switch (selectedOS) {
//    case OperatingSystem.LINUX:
//        project.ext.lwjglNatives = "natives-linux"
//        break
//    case OperatingSystem.MAC_OS:
//        project.ext.lwjglNatives = "natives-macos"
//        break
//    case OperatingSystem.WINDOWS:
//        project.ext.lwjglNatives = "natives-windows"
//        break
//}

group 'org.crafter'
version '0.0-PROTOTYPE'

repositories {
    mavenCentral()
}

String[] natives = ["natives-linux", "natives-macos", "natives-windows"]

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"

    for (OS in natives) {
        println("Adding " + OS)

        runtimeOnly "org.lwjgl:lwjgl::$OS"
        runtimeOnly "org.lwjgl:lwjgl-assimp::$OS"
        runtimeOnly "org.lwjgl:lwjgl-glfw::$OS"
        runtimeOnly "org.lwjgl:lwjgl-openal::$OS"
        runtimeOnly "org.lwjgl:lwjgl-opengl::$OS"
        runtimeOnly "org.lwjgl:lwjgl-stb::$OS"
    }
    implementation "org.joml:joml:${jomlVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

apply plugin : "java"
ext {
    javaMainClass = "org.crafter.Main"
}

application {
    mainClassName = javaMainClass
}

test {
    useJUnitPlatform()
}

jar {
    // Don't want duplicate libs
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class': 'org.crafter.Main'
        )
    // Now shovel all those natives in there!
    } from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}