plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"

group 'org.crafter'
version 'Continuous-Build'
final String releaseVersion = 'v0.0.0 - Pre-Alpha'

repositories {
    mavenCentral()
}

tasks.named("startScripts").configure {dependsOn("shadowJar")}
tasks.named("startShadowScripts").configure {dependsOn("jar")}

String[] natives = ["natives-linux", "natives-macos", "natives-windows"]
dependencies {

    // testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    // testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"

    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'


    for (OS in natives) {
        println("Adding $OS")

        runtimeOnly "org.lwjgl:lwjgl::$OS"
        runtimeOnly "org.lwjgl:lwjgl-assimp::$OS"
        runtimeOnly "org.lwjgl:lwjgl-glfw::$OS"
        runtimeOnly "org.lwjgl:lwjgl-openal::$OS"
        runtimeOnly "org.lwjgl:lwjgl-opengl::$OS"
        runtimeOnly "org.lwjgl:lwjgl-stb::$OS"
    }

    implementation "org.joml:joml:${jomlVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//test {
//    useJUnitPlatform()
//}

application {
    mainClassName = "org.crafter.Main"
}

shadowJar {
    println("ShadowJar: Compiling and jarifying game!")
    mainClassName = "org.crafter.Main"
    archiveBaseName.set('Crafter')
    archiveClassifier.set('')
//     archiveVersion.set('')
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

// This runs the runShadowScripts then packs up the full game so users can run it easily, but only if fullGame flag given
final String[] dirs = ["fonts", "shaders", "textures"]

tasks.register("packageFullGame", Zip)  {

    println("Packing full build of " + releaseVersion + "!")

    archiveFileName = "CrafterLatestRelease.zip"

    // All game dirs
    for (directory in dirs) {
        println("Packing folder: $directory")
        from("$directory/") {
            include "*"
            into("$directory")
        }
    }
    // Now put the jar in
    from("build/libs") {
        println("Packing: Jar File")
        include "*"
        rename { String fileName ->
            fileName.replace("Crafter-Continuous-Build.jar", "Crafter.jar")
        }
    }

    doLast {
        for (thisFile in fileTree("build/distributions").filter { it.isFile() }.files.name) {
            if (thisFile != "CrafterLatestRelease.zip") {
                project.delete("build/distributions/" + thisFile)
                println("Deleted: $thisFile")
            }
        }
    }
}