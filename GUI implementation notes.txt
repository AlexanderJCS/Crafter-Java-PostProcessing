        final float[] rotation = {0.0f};

        AtomicInteger index = new AtomicInteger();
        final String[] lastFocused = {""};

        GUIStorage.addGUI("inGame",
             new GUI("inGame")
                    .addGUIElement(
                            "versionInfo",
                            new Label(VERSION_INFO, 40, Alignment.TOP_LEFT, null)
                    )
                    .addGUIElement(
                            "buttonTest",
                            new Button("I am a button!", 52, Alignment.CENTER, new Vector2f(0,-120))
                                    .addClickCallback((gui, element) -> {
                                        System.out.println("click clack");
                                        System.out.println("This is definitely a button, yes");
                                        gui.setText(element.name(), "NICE!");
                                    })
                    )
                     .addGUIElement(
                             "textBox",
                             new TextBox("Your text here...", 52, Alignment.BOTTOM_LEFT, null, 1024)
                                     .addEnterInputCallback((gui, element, textData) -> {
                                         if (!textData.equals("")) {
                                             System.out.println(element.name() + " output: " + textData);

                                             int gotten = index.get();

                                             DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm");
                                             LocalDateTime timeStampRaw = LocalDateTime.now();
                                             String timeStamp = formatter.format(timeStampRaw);

                                             String playerText = "(" + timeStamp + ") Player: " + textData;

                                             GUIStorage.addElement("inGame", "index" + gotten, new Label(
                                                     playerText,
                                                     32,
                                                     Alignment.BOTTOM_LEFT,
                                                     new Vector2f(0, 60)
                                             ));

                                             for (int i = 0; i <= gotten; i++) {
                                                 int multiplier = gotten - i;
                                                 GUIStorage.setOffset("index" + i, new Vector2f(0, (multiplier + 2) * 60));
                                             }

                                             index.getAndIncrement();
                                         }
                                     })
//                                     .addClickCallback((gui, element) -> {
//                                         System.out.println("click clack");
//                                     })
                     )
                     .addGUIElement("youtubeButton", new Label("test", 52, Alignment.BOTTOM_RIGHT,null)
                             .addOnStepCallback((gui, element) -> {
                                 gui.setText("youtubeButton", "Delta Time: " + Delta.getDelta());
                             })
                     )
                     .addGUIElement("mousey", new Label("", 52, Alignment.TOP_RIGHT,null)
                             .addOnStepCallback((gui, element) -> {
                                 gui.setText("mousey", "Mouse Pos: " + Mouse.getPosition().x() + ", " + Mouse.getPosition().y());
                             })
                     )
                     .addGUIElement("fancy", new Label("test", 52, Alignment.TOP_LEFT,new Vector2f(0, -60))
                             .addOnStepCallback(
                                     new OnStep() {
                                    @Override
                                    public void action(GUI gui, GUIElement element) {
                                        String focusedElement = gui.getCurrentlyFocused();
                                        if (!focusedElement.equals(lastFocused[0])) {
                                            gui.setText("fancy", "Currently Focused: " + focusedElement);
                                            lastFocused[0] = focusedElement;
                                        }
                                    }
                             })
                     )
                     .addGUIElement("imageBoi", new Image("textures/debug.png", 10, Alignment.CENTER_LEFT, null)
                     )
                     // -160 because original is 16x16 scaled by 10x, trimmed pixels (1 off top, 1 off bottom) makes it 3x14
                     .addGUIElement("trimTest", new Image("textures/trim_test.png", 10, Alignment.TOP_CENTER, new Vector2f(0,0), true)
                     )
                     .addGUIElement("dropMenu", new DropMenu(512, new String[]{"this is a test of a long blah blah blah", "there"}, 32, Alignment.BOTTOM_RIGHT,new Vector2f(0,120), null))
                     .addGUIElement("colorMenu", new DropMenu(256, new String[]{"red", "green", "blue", "gray"}, 24, Alignment.TOP_LEFT,new Vector2f(0,-130), 3)
                             .addClickCallback((gui, element) -> {
                                 DropMenu thisMenu = (DropMenu) element;
                                 if (thisMenu.newOption()) {
                                     switch (thisMenu.getSelectedOption()) {
                                         case "red" -> Window.setClearColor(1, 0, 0);
                                         case "green" -> Window.setClearColor(0, 1, 0);
                                         case "blue" -> Window.setClearColor(0, 0, 1);
                                         case "gray" -> Window.setClearColor(0.75f);
                                         default -> {
                                             // oops
                                         }
                                     }
                                 }
                             })
                     )
                     .addGUIElement("myCoolMesh",
                             new GUIMesh(
                                     ImageMeshFactory.createImageMesh(1, "textures/debug.png"),
                                     Alignment.CENTER,
                                     null
                             )
                                     .addOnRenderCallback((gui, element) -> {

                                         rotation[0] += Delta.getDelta() * 50.0f;
                                         if (rotation[0] > 360) {
                                             rotation[0] = 0;
                                         }
//                                         System.out.println(rotation[0]);

                                         ShaderStorage.start("3d");
                                         // -Z is forwards
                                         Camera.setPosition(0,0,0);
                                         Camera.setRotation(0,0,0);
                                         Camera.updateCameraMatrix();
                                         Camera.setObjectMatrix(new Vector3f(0,0,-50), new Vector3f(0,(float)Math.toRadians(rotation[0]),0), new Vector3f(1,1,1));

                                         MeshStorage.render(element.getMeshUUID());
                                     })
                     )
                     .addGUIElement(
                             "sassyButton",
                             new Button("Getcya buttons here!", 52, Alignment.BOTTOM_RIGHT, null)
                                     .addClickCallback((gui, element) -> {
                                         String[] sassiness = new String[] {
                                                 "over here!",
                                                 "Nah, over here!",
                                                 "Here I am!",
                                                 "Nah, jk, here!"
                                         };

                                         gui.setText(element.name(), sassiness[(int)(Math.random() * 3)]);
                                         gui.setAlignment(element.name(), Alignment.asArray()[(int)(Math.random() * 8)] );

                                     })
                                     .addHoverCallback(((gui, element) -> {
                                         gui.setText(element.name(), String.valueOf(Math.random()));
                                     }))
                     )
                     .addGUIElement("quitButton",
                             new Button( "QUIT", 44, Alignment.CENTER_RIGHT, null)
                                     .addClickCallback(((gui, element) -> Window.close()))
                     )
        );

        GUIStorage.selectGUI("inGame");


Then this is the order of how you go from 3d into 2d

GUIStorage.process();

Window.clearAll();

// 3d goes here

// This automatically clears the depth buffer, selects shader yada yada
GUIStorage.render();